# upstream web1 {
#   server web1:3000;
# }

# server {
#         # this server listens on port 80
#         listen 80 default_server;
#         listen [::]:80 default_server;
        
#         # name this server "nodeserver", but we can call it whatever we like
#         server_name app.example.com;

#         # the location / means that when we visit the root url (localhost:80/), we use this configuration
#         location / {
#                 # a bunch of boilerplate proxy configuration
#                 proxy_http_version 1.1;
#                 proxy_cache_bypass $http_upgrade;

#                 proxy_set_header Upgrade $http_upgrade;
#                 proxy_set_header Connection 'upgrade';
#                 proxy_set_header Host $host;
#                 proxy_set_header X-Real-IP $remote_addr;
#                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#                 proxy_set_header X-Forwarded-Proto $scheme;

#                 # the real magic is here where we forward requests to the address that the Node.js server is running on
#                 proxy_pass http://web1;
#         }
# }


upstream march-backoffice {
    server march-backoffice:3000; 
}

upstream auth-api {
    server auth-api:3001;
}

upstream inventory-api {
    server inventory-api:3002;
}

upstream db1 {
    server db1:3306;
}
# upstream client {
#     server client:4200;
# }
server {
    listen 80;
    location / {
        proxy_set_header Host $host;
        # enable WebSockets (for ws://sockjs not connected error in the client source: https://stackoverflow.com/questions/41381444/websocket-connection-failed-error-during-websocket-handshake-unexpected-respon)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass http://march-backoffice/;
    }
    location /api/auth {
        rewrite ^/api/auth/(.*) /$1 break; # works for both /server1 and /server1/
        proxy_set_header Host $host;
        proxy_pass http://auth-api/;
    }
     location /api/inventory {
        rewrite ^/api/inventory/(.*) /$1 break; # works for both /server1 and /server1/
        proxy_set_header Host $host;
        proxy_pass http://inventory-api/;
    }
     location /api/db {
        rewrite ^/api/db/(.*) /$1 break; # works for both /server1 and /server1/
        proxy_set_header Host $host;
        proxy_pass http://db1/;
    }
#     location /server2 {
#         rewrite ^/server2/(.*) /$1 break;
#         proxy_set_header Host $host;
#         proxy_pass http://server2/;
#     }
}